---
- name: Initialize Kubernetes control plane
  command: >
    kubeadm init --pod-network-cidr=10.244.0.0/16
  args:
    creates: /etc/kubernetes/admin.conf
  register: kubeadm_init
  retries: 3
  delay: 30
  until: kubeadm_init is not failed
  ignore_errors: false

- name: Save kubeadm join command for workers
  shell: |
    kubeadm token create --print-join-command
  register: join_command
  changed_when: false
  retries: 3
  delay: 10

- name: Copy kubeconfig to regular user
  shell: |
    mkdir -p /home/{{ ansible_user | default('ubuntu') }}/.kube &&
    cp /etc/kubernetes/admin.conf /home/{{ ansible_user | default('ubuntu') }}/.kube/config &&
    chown {{ ansible_user | default('ubuntu') }}:{{ ansible_user | default('ubuntu') }} /home/{{ ansible_user | default('ubuntu') }}/.kube/config
  args:
    creates: "/home/{{ ansible_user | default('ubuntu') }}/.kube/config"
  retries: 2
  delay: 5

- name: Apply Flannel CNI
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  args:
    creates: /etc/cni/net.d/10-flannel.conflist
  retries: 3
  delay: 15
  register: flannel_apply
  until: flannel_apply is not failed

- name: Fetch admin.conf to local machine
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/admin.conf
    flat: yes
  retries: 3
  delay: 10

- name: Create prometheus directory
  file:
    path: /etc/prometheus
    state: directory
    mode: "0755"

- name: Create prometheus config
  template:
    src: templates/prometheus.yml.j2
    dest: /etc/prometheus/prometheus.yml
    mode: "0644"

- name: Run Prometheus container
  community.docker.docker_container:
    name: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - /etc/prometheus:/etc/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml
    restart_policy: always
    state: started

- name: Run Grafana container
  community.docker.docker_container:
    name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    env:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_USERS_ALLOW_SIGN_UP: "false"
    restart_policy: always
    state: started

- name: Wait for Grafana to be ready
  uri:
    url: http://{{ hostvars['ephemeral-cluster-master'].ansible_host }}:3000/api/health
    method: GET
  register: grafana_health
  retries: 30
  delay: 10
  until: grafana_health.status == 200

- name: Add Prometheus data source to Grafana
  become: false
  delegate_to: localhost # delegate to local host and dont use sudo
  run_once: true
  uri:
    url: "http://{{ hostvars['ephemeral-cluster-master'].ansible_host }}:3000/api/datasources"
    method: POST
    headers:
      Authorization: "Basic {{ ('admin:admin') | b64encode }}"
      Accept: application/json
      Content-Type: application/json
      X-Grafana-Org-Id: "1"
    body_format: json
    body:
      name: "Prometheus"
      type: "prometheus"
      url: "http://{{ hostvars['ephemeral-cluster-master'].ansible_host }}:9090"
      access: "proxy"
      isDefault: true
    status_code: 200,409
    return_content: yes
  register: prometheus_datasource
  retries: 5
  delay: 5
  until: (prometheus_datasource is defined) and ((prometheus_datasource.status | default(0)) in [200, 409])

- name: Import Kubernetes Cluster Monitoring Dashboard
  become: false
  delegate_to: localhost # delegate to local host and dont use sudo
  run_once: true
  uri:
    url: "http://{{ hostvars['ephemeral-cluster-master'].ansible_host }}:3000/api/dashboards/import"
    method: POST
    headers:
      Authorization: "Basic {{ ('admin:admin') | b64encode }}"
      Content-Type: application/json
      Accept: application/json
      X-Grafana-Org-Id: "1"
    body_format: json
    body:
      dashboard: "{{ lookup('file', '../grafana/dashboards/k8s-cluster-health.json') | from_json }}"
      overwrite: true
      inputs:
        - name: "DS_PROMETHEUS"
          type: "datasource"
          pluginId: "prometheus"
          value: "Prometheus"
    status_code: 200
    return_content: yes
  register: dashboard_import
  retries: 5
  delay: 5
  until: (dashboard_import is defined) and ((dashboard_import.status | default(0)) == 200)
